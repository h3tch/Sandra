function data = importfile(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as column vectors.
%   [SEQ,DATE1,IND,SPEC,SP,SUN_SHADE,BLATTDICKEMM,CHLOROPHYLLGEHALTSPAD,REISSFESTIGKEITN,LDMCMGG,LMA,SLAMMMG1,LAI,VISSKY,ISF,STOMATADICHTENPROMM,D15N14N,D13C12C,N,C,A,B,PARSAT,ETR1500MOLM2S1,INIT_SLOPE,PSEUDO_R2,QUALITYCURVE,PHOTOINHIBDECLINEOFCURVE,HHENZUWACHSMJAHR,GROUP,GROUPHSCON]
%   = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [SEQ,DATE1,IND,SPEC,SP,SUN_SHADE,BLATTDICKEMM,CHLOROPHYLLGEHALTSPAD,REISSFESTIGKEITN,LDMCMGG,LMA,SLAMMMG1,LAI,VISSKY,ISF,STOMATADICHTENPROMM,D15N14N,D13C12C,N,C,A,B,PARSAT,ETR1500MOLM2S1,INIT_SLOPE,PSEUDO_R2,QUALITYCURVE,PHOTOINHIBDECLINEOFCURVE,HHENZUWACHSMJAHR,GROUP,GROUPHSCON]
%   = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [seq,date1,ind,spec,sp,sun_shade,Blattdickemm,ChlorophyllgehaltSPAD,ReissfestigkeitN,LDMCmgg,LMA,SLAmmmg1,LAI,VisSky,ISF,Stomatadichtenpromm,d15N14N,d13C12C,N,C,a,b,PARsat,ETR1500molm2s1,init_slope,pseudo_r2,qualitycurve,photoinhibdeclineofcurve,HhenzuwachsmJahr,Group,GroupHscon] = importfile1('data.csv',1, 252);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/07/21 21:23:45

%% Initialize variables.
delimiter = ';';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\.]*)+[\,]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\.]*)*[\,]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers=='.');
                thousandsRegExp = '^\d+?(\.\d{3})*\,{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = strrep(numbers, '.', '');
                numbers = strrep(numbers, ',', '.');
                numbers = textscan(numbers, '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32]);
rawCellColumns = raw(:, [2,3,4,5,6,31]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names

data = table;
data.seq = cell2mat(rawNumericColumns(:, 1));
data.date = rawCellColumns(:, 1);
data.ind = rawCellColumns(:, 2);
data.spec = rawCellColumns(:, 3);
data.sp = rawCellColumns(:, 4);
data.sun_shade = rawCellColumns(:, 5);
data.Blattdicke_mm = cell2mat(rawNumericColumns(:, 2));
data.Chlorophyll = cell2mat(rawNumericColumns(:, 3));
data.Reissfestigkeit_N = cell2mat(rawNumericColumns(:, 4));
data.DW_FW = cell2mat(rawNumericColumns(:, 5));
data.LMA = cell2mat(rawNumericColumns(:, 6));
data.SLA = cell2mat(rawNumericColumns(:, 7));
data.LAI = cell2mat(rawNumericColumns(:, 8));
data.VisSky = cell2mat(rawNumericColumns(:, 9));
data.ISF = cell2mat(rawNumericColumns(:, 10));
data.Stomatadichte = cell2mat(rawNumericColumns(:, 11));
data.d15N14N = cell2mat(rawNumericColumns(:, 12));
data.d13C12C = cell2mat(rawNumericColumns(:, 13));
data.N = cell2mat(rawNumericColumns(:, 14));
data.C = cell2mat(rawNumericColumns(:, 15));
data.a = cell2mat(rawNumericColumns(:, 16));
data.b = cell2mat(rawNumericColumns(:, 17));
data.PARsat = cell2mat(rawNumericColumns(:, 18));
data.ETR_1500 = cell2mat(rawNumericColumns(:, 19));
data.init_slope = cell2mat(rawNumericColumns(:, 20));
data.pseudo_r2 = cell2mat(rawNumericColumns(:, 21));
data.qualitycurve = cell2mat(rawNumericColumns(:, 22));
data.photoinhibdeclineofcurve = cell2mat(rawNumericColumns(:, 23));
data.Hzuwachs = cell2mat(rawNumericColumns(:, 24));
data.Group = cell2mat(rawNumericColumns(:, 25));
data.GroupHscon = rawCellColumns(:, 6);
data.HsconRang = cell2mat(rawNumericColumns(:, 26));


